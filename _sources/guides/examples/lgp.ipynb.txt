{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import evokit.evolvables as evolvables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import evokit.evolvables.lgp as lgp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a linear program.Constants c = [ 7.  8.  9. 10. 11.],\n",
      "Registers r = [3. 4. 5. 6.]\n"
     ]
    }
   ],
   "source": [
    "program = lgp.LinearProgram(registers = (3, 4, 5, 6),\n",
    "                            constants = (7, 8, 9, 10, 11))\n",
    "print(program)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Benchmark (just one, need to add more)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Running LGP in Context =====\n",
      "Collect command into structure: r[2] <- add(c[1], r[2])\n",
      "\n",
      "===== End State of LGP =====\n",
      "This is a linear program.Constants c = [5. 6. 7.],\n",
      "Registers r = [10.  7. 14.  4.]\n",
      "\n",
      "===== End State of Benchmark for Comparison =====\n",
      "Benchmark constants: [5.0, 6.0, 7.0]\n",
      "Test: benchmark registers: [10.0, 7.0, 14.0, 4.0],\n"
     ]
    }
   ],
   "source": [
    "A = lgp.LinearProgram(constants=(5, 6, 7),\n",
    "                      registers=(1, 2, 3, 4))\n",
    "\n",
    "initial_registers = list(A.registers.copy())\n",
    "initial_constants = list(A.constants.copy())\n",
    "\n",
    "def add(a: float, b: float) -> float:\n",
    "    return a + b\n",
    "\n",
    "def sub(a: float, b: float) -> float:\n",
    "    return a + b\n",
    "\n",
    "def less(a: float, b: float) -> bool:\n",
    "    return a < b\n",
    "\n",
    "def print_args(a: float, b: float) -> float:\n",
    "    return 0\n",
    "from typing import Sequence\n",
    "oprs: Sequence[lgp.Instruction] = [lgp.Operation(add, 1, (2, 3)),\n",
    "                                  lgp.Operation(sub, 0, (1, 2)),\n",
    "                                  lgp.Operation(add, 2, (-2, 2)),\n",
    "                                  lgp.StructOverLines(lgp.If(lgp.Condition(less, (1, 2))), 2),\n",
    "                                  lgp.Operation(add, 2, (-2, 2)),\n",
    "                                  lgp.Operation(add, 2, (-3, 1)),\n",
    "                                  ]\n",
    "\n",
    "print(\"\\n===== Running LGP in Context =====\")\n",
    "A.run(oprs)\n",
    "print(\"\\n===== End State of LGP =====\")\n",
    "print(str(A))\n",
    "\n",
    "r = initial_registers\n",
    "c = initial_constants\n",
    "r[1] = add(r[2], r[3])\n",
    "r[0] = sub(r[1], r[2])\n",
    "r[2] = add(c[1], r[2])\n",
    "\n",
    "if (1 < 2):\n",
    "    r[2] = add(c[1], r[2])\n",
    "    r[2] = add(c[2], r[1])\n",
    "\n",
    "print(\"\\n===== End State of Benchmark for Comparison =====\")\n",
    "print(f\"Benchmark constants: {c}\")\n",
    "print(f\"Test: benchmark registers: {r},\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
