{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Making a Custom Selector"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In an evolutionary algorithm, a selector selects from a set of individuals into a strict subset. Because the process uses the fitness of individuals, selection takes place after evaluation:\n",
    "\n",
    "<center>\n",
    "<img src='media/highlight-selector.svg' style='width: 25em'></img>\n",
    "</center>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialise Population\n",
    "\n",
    "Evokit represents the population with `core.Population`.\n",
    "\n",
    "To begin, initialise a `Population` of binary string representations.\n",
    "\n",
    "For now, manually assign to the `.fitness` of each individual. The `Evaluator` does this automatically. See the [OneMax tutorial](./onemax.html) for an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from evokit.core import Population\n",
    "from evokit.evolvables.binstring import BinaryString"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['[1, 1, 1, 1, 1]', '[1, 1, 1, 1, 0]', '[1, 1, 1, 0, 0]', '[1, 1, 0, 0, 0]', '[1, 0, 0, 0, 0]', '[0, 0, 0, 0, 0]']\n"
     ]
    }
   ],
   "source": [
    "pop : Population[BinaryString] = Population[BinaryString]()\n",
    "\n",
    "pop.append(BinaryString(int('11111', 2), 5))\n",
    "pop.append(BinaryString(int('11110', 2), 5))\n",
    "pop.append(BinaryString(int('11100', 2), 5))\n",
    "pop.append(BinaryString(int('11000', 2), 5))\n",
    "pop.append(BinaryString(int('10000', 2), 5))\n",
    "pop.append(BinaryString(int('00000', 2), 5))\n",
    "\n",
    "print(pop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop[0].fitness = 5\n",
    "pop[1].fitness = 4\n",
    "pop[2].fitness = 3\n",
    "pop[3].fitness = 2\n",
    "pop[4].fitness = 1\n",
    "pop[5].fitness = 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fitness is the sum of all bits in a string. Check all fitness values are correctly assigned:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitness of [1, 1, 1, 1, 1] is 5\n",
      "Fitness of [1, 1, 1, 1, 0] is 4\n",
      "Fitness of [1, 1, 1, 0, 0] is 3\n",
      "Fitness of [1, 1, 0, 0, 0] is 2\n",
      "Fitness of [1, 0, 0, 0, 0] is 1\n",
      "Fitness of [0, 0, 0, 0, 0] is 0\n"
     ]
    }
   ],
   "source": [
    "for individual in pop:\n",
    "    print(f\"Fitness of {individual} is {individual.fitness}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Selector\n",
    "\n",
    "All custom selectors must derive `core.Selector`.\n",
    "\n",
    "The behaviour of a `Selector` can be defined on two levels. A custom implementation must override one of the following methods:\n",
    "\n",
    "1. `.select_population` receives a population and returns a population.\n",
    "\n",
    "2. `.select` receives a tuple of individuals and returns a subset of it.\n",
    "\n",
    "The default implementation of `.select_population` repeatedly applies `.select` to the population, with replacement, until a given number of individuals are selected."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define a truncation selector. Because the truncation selector selects the best `n` items in a population, just overriding `.select` (which selects with replacement) is not enough.\n",
    "\n",
    "Instead, override `.select_population`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import override, Self\n",
    "from evokit.core import Selector\n",
    "from operator import attrgetter\n",
    "\n",
    "class TruncationSelector(Selector):\n",
    "    @override\n",
    "    def select_population(self: Self,\n",
    "                          from_population: Population)\\\n",
    "            -> Population:\n",
    "        \n",
    "        return Population(*sorted(list(from_population), key=attrgetter(\"fitness\"))\n",
    "                          [-self.budget:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apply the selector to the population.\n",
    "\n",
    "With a budget of `1`, the selector returns an individual in the population with highest fitness. Within the previously defined population, that individual is always `[1, 1, 1, 1, 1]`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From ['[1, 1, 1, 1, 1]', '[1, 1, 1, 1, 0]', '[1, 1, 1, 0, 0]', '[1, 1, 0, 0, 0]', '[1, 0, 0, 0, 0]', '[0, 0, 0, 0, 0]'],\n",
      "the selector selects ['[1, 1, 1, 1, 1]'].\n"
     ]
    }
   ],
   "source": [
    "SELECTION_BUDGET: int = 1\n",
    "\n",
    "old_pop = pop\n",
    "\n",
    "selector = TruncationSelector(SELECTION_BUDGET)\n",
    "\n",
    "new_pop = selector.select_population(old_pop)\n",
    "\n",
    "print(f\"From {old_pop},\\nthe selector selects {new_pop}.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
